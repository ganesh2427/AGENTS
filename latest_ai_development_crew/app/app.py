import streamlit as st
import os
import sys
import traceback

# Disable ChromaDB and knowledge features
os.environ["CREWAI_DISABLE_TELEMETRY"] = "true"
os.environ["CREWAI_STORAGE_DIR"] = "/tmp"
os.environ["TOKENIZERS_PARALLELISM"] = "false"

st.title("üöÄ AI Development Crew")

@st.cache_data
def load_crew_module():
    """Load the CrewAI module with error handling"""
    try:
        # Add your source path
        sys.path.append('/mount/src/agents/latest_ai_development_crew/src')
        from latest_ai_development_crew.main import run_agent
        return run_agent, None
    except Exception as e:
        return None, str(e)

# Load the crew module
run_agent_func, load_error = load_crew_module()

if load_error:
    st.error(f"‚ö†Ô∏è CrewAI module loading failed: {load_error}")
    st.info("Running in mock mode. Add your API keys to Streamlit secrets for full functionality.")
    use_mock = True
else:
    st.success("‚úÖ CrewAI module loaded successfully!")
    use_mock = False

# Input section
user_input = st.text_input("Ask something about AI:", placeholder="e.g., Latest trends in Agentic AI")

if st.button("üöÄ Run Agent"):
    if user_input.strip():
        with st.spinner("ü§ñ AI Development Crew is working..."):
            try:
                if not use_mock and run_agent_func:
                    # Use your actual CrewAI agent
                    result = run_agent_func(user_input)
                    
                    # Handle different result types
                    if isinstance(result, dict) and "error" in result:
                        st.warning(f"‚ö†Ô∏è {result.get('message', 'Agent encountered an issue')}")
                        st.info("Falling back to mock response...")
                        use_mock = True
                    else:
                        st.success("‚úÖ CrewAI Analysis Complete!")
                        
                        # Display results in tabs
                        tab1, tab2 = st.tabs(["üìÑ Formatted Result", "üî§ Raw Output"])
                        
                        with tab1:
                            if isinstance(result, str):
                                st.markdown(result)
                            else:
                                st.write(result)
                        
                        with tab2:
                            st.code(str(result), language="text")
                        
                        # Add download option
                        st.download_button(
                            label="üì• Download Result",
                            data=str(result),
                            file_name=f"ai_analysis_{user_input[:20].replace(' ', '_')}.txt",
                            mime="text/plain"
                        )
                
                # Fallback to mock if needed
                if use_mock:
                    result = f"""
# AI Development Analysis: {user_input}

## Executive Summary
Based on your query about "{user_input}", here's a comprehensive analysis of current AI development trends and insights.

## Key Findings

### Current Market Trends
- **Agentic AI Systems**: Autonomous agents are becoming more sophisticated with improved reasoning capabilities
- **Multi-Modal Integration**: AI systems now seamlessly process text, images, audio, and video
- **Edge Computing**: AI deployment is shifting towards edge devices for better performance and privacy

### Technical Developments
- **Large Language Models (LLMs)**: Continued improvements in reasoning, coding, and specialized domain knowledge
- **Retrieval Augmented Generation (RAG)**: Enhanced accuracy through real-time information retrieval
- **Multi-Agent Frameworks**: Collaborative AI systems working together on complex tasks

### Industry Applications
- **Healthcare**: AI-powered diagnostics and personalized treatment plans
- **Finance**: Automated trading systems and fraud detection
- **Education**: Personalized learning experiences and intelligent tutoring systems

## Future Outlook
The AI landscape is rapidly evolving towards more specialized, efficient, and autonomous systems. Key areas to watch include:

1. **Improved Reasoning**: Better logical thinking and problem-solving capabilities
2. **Reduced Hallucinations**: More reliable and factual AI responses
3. **Energy Efficiency**: Smaller, more efficient models for widespread deployment

## Recommendations
- Stay updated with latest AI research and developments
- Consider implementing AI solutions in your specific domain
- Focus on ethical AI practices and responsible deployment

---
*Analysis generated by AI Development Crew*
                    """
                    
                    st.success("‚úÖ Analysis Complete!")
                    st.markdown(result)
                    st.info("üîß This is a mock response. Configure API keys for full CrewAI functionality.")
                
            except Exception as e:
                st.error("‚ùå An error occurred during processing")
                with st.expander("üîç Error Details"):
                    st.code(traceback.format_exc())
    else:
        st.warning("‚ö†Ô∏è Please enter a question about AI development.")

# Sidebar with information
with st.sidebar:
    st.markdown("### üîß Configuration")
    if load_error:
        st.error("CrewAI module not loaded")
    else:
        st.success("CrewAI ready")
    
    st.markdown("### üí° Example Questions")
    examples = [
        "Latest trends in Agentic AI",
        "Multi-agent system architectures", 
        "LLM fine-tuning techniques",
        "AI ethics and safety measures"
    ]
    
    for example in examples:
        if st.button(example, key=example):
            st.session_state.user_input = example

st.markdown("---")
st.markdown("ü§ñ **Powered by CrewAI** | Built with Streamlit")